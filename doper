#!/bin/bash

DNAMES1="dev|test"
DNAMES2="staging|prod"
CMDS="up|down|ps|images|logs|restart|stop|start"
NOREP="(ps|images|logs)"
BASE="/opt/docker"
SUDO="/usr/bin/sudo"
SSH="/usr/bin/ssh"
BIN=$(basename "$0")

###############################################################################
usage() {
  read -r -d '' usage << EOM
Usage:
  $BIN $NAME ($DNAMES1) (build|$CMDS) [OPTS]
  $BIN $NAME ($DNAMES2) (pull|$CMDS) [OPTS]
  $BIN $NAME remote ($DNAMES2) (pull|$CMDS)
  $BIN $NAME push ($DNAMES2)

Safe path:
  sudo -g docker $BIN $NAME dev build
  sudo -g docker $BIN $NAME dev up -d
  sudo -g docker $BIN $NAME test build
  sudo -g docker $BIN $NAME test up -d
  sudo -g docker $BIN $NAME push staging
  sudo $BIN $NAME remote staging pull
  sudo $BIN $NAME remote staging up
  sudo $BIN $NAME remote staging down
  sudo -g docker $BIN $NAME push prod
  sudo $BIN $NAME remote prod pull
  sudo $BIN $NAME remote prod up

Direct path:
  sudo -g docker $BIN $NAME test build
  sudo -g docker $BIN $NAME push prod
  sudo $BIN $NAME remote prod pull
  sudo $BIN $NAME remote prod up
EOM
  echo "$usage"
  exit "$1"
}

send() {
  echo -e "<pre>\n$2\n</pre>" | mail -s "${AUTH}@${HOSTNAME}: $BIN $NAME $1" "$MAIL"
}

###############################################################################
if [ "$1" = '-a' ]; then shift; if [ -n "$1" ]; then AUTH="*$1"; shift; fi; fi

export NAME="$1"
if [ -z "$NAME" -o "$1" = 'help' -o "$1" = 'usage' ]; then
  NAME='<project>'
  usage 1
elif [ -r "$BASE/$NAME/.doperrc" ]; then
  . "$BASE/$NAME/.doperrc"
else
  echo "Project not found"
  exit 1
fi
shift

duser="$(logname)"
[ -n "$AUTH" -a "$duser" = "$RUSER" ] || AUTH="$duser"
[ "$duser" = "$USER" ] || AUTH+="($USER)"

dname="$1"
echo "$dname"|grep -Eq "^($DNAMES1|$DNAMES2|remote|push|deliver|deploy)$" || usage 1
shift

case "$dname" in

  dev|test|staging|prod)

    cmd="$1"
    echo "$cmd"|grep -Eq "^($CMDS|build|pull)$" || usage 1
    shift

    echo "$@"|grep -Eq "build" && usage 2

    if [ ! -f "$BASE/$NAME/docker-compose.$dname.yml" ]; then
      echo "$dname not allowed here"
      exit 1
    fi

    if [ "$EUID" -eq 0 ]; then
      echo "Don't run me as root"
      exit 1
    fi

    [ "$dname" = 'dev' ] && cname="$duser" || cname="$dname"

    if [ "$cmd" = 'build' ]
    then
      echo "$dname"|grep -Eq "^($DNAMES2)$" && usage 1

      for a in "${SRVS[@]}"
      do
        img="$NAME/$a"
        [ "$dname" = 'dev' ] && img+="-$cname"
        [ "$dname" = 'dev' ] && repo="$img" || repo="$REGISTRY/$img"

        cd "/home/$duser/$a" 2>/dev/null;
        if [ $? -ne 0 ]
        then
          printf -v line '%-25s %s\n' "$repo" "no source"
          out+="$line"
          echo -e "$line"

        else
          if [ "$dname" != 'dev' ] && output=$(git status --porcelain) && [ -n "$output" ]
          then
            printf -v line '%-25s %s\n' "$repo" "commit your changes first"
            out+="$line"
            echo -e "$line"

          else
            rev=$(git rev-parse --short HEAD)
            tag=$(git describe --tags 2>/dev/null)
            [ "$dname" = 'dev' ] && args="--build-arg UID=$UID"

            printf -v line '%-25s %-9s %-9s' "$repo" "$rev" "$tag"
            out+="$line"
            echo -e "\n+ $line $args\n"

            if docker build . -t "$repo:$rev" $args
            then
              out+="\n"
              docker tag "$repo:$rev" "$repo:latest"
              out+="$(docker images "$repo" --format "{{.ID}} $img:{{.Tag}}")\n"

              if [ "$dname" = 'test' ]
              then
                docker push "$repo:$rev"
                out+="push $repo:$rev\n"
                if [ -n "$tag" ]
                then
                  docker tag "$repo:$rev" "$repo:$tag"
                  docker push "$repo:$tag"
                  out+="push $repo:$tag\n"
                fi
              fi

            else
              out+="FAILED\n"
            fi
          fi
        fi
        out+="\n"
      done
      send "$dname $cmd $@" "$out"

    elif [ "$cmd" = 'pull' ]
    then
      echo "$dname"|grep -Eq "^($DNAMES2)$" || usage 1

      for a in "${SRVS[@]}"
      do
        repo="$REGISTRY/$NAME/$a"
        docker pull "$repo" --all-tags
        out+="pull $repo\n"
        out+="$(docker images "$repo" --format "{{.ID}} $repo:{{.Tag}}")\n\n"
      done
      send "$dname $cmd" "$out"

    else
      for p in "${PORTS[@]}"; do [ "${p%%:*}" = "$cname" ] && export PORT="${p##*:}"; done
      if [ -z "$PORT" ]; then
        echo "User not found"
        exit 1
      fi

      DNAME="$cname" docker-compose -p "$NAME-$cname" -f "$BASE/$NAME/docker-compose.yml" \
        -f "$BASE/$NAME/docker-compose.$dname.yml" "$cmd" $@
      echo "$cmd"|grep -Eq "^$NOREP$" || send "$dname $cmd $@"
    fi

  ;;
  remote)

    rname="$1"
    echo "$rname"|grep -Eq "^($DNAMES2)$" || usage 1
    shift
    cmd="$1"
    echo "$cmd"|grep -Eq "^(pull|$CMDS)$" || usage 1
    shift

    if [ "$EUID" -ne 0 ]; then
       echo "Run me with sudo and God bless you"
    else
      $SUDO -u $RUSER $SSH $RHOST "sudo -g docker $BIN -a $duser $NAME $rname $cmd $@"
#      echo "$cmd"|grep -Eq "^$NOREP$" || send "$dname $rname $cmd $@"
    fi

  ;;
  push)

    cmd="$1"
    echo "$cmd"|grep -Eq "^($DNAMES2)$" || usage 1
    shift

    for a in "${SRVS[@]}"
    do
      repo="$REGISTRY/$NAME/$a"
      docker tag "$repo:latest" "$repo:$cmd"
      if [ $? -ne 0 ]
      then
        printf -v line '%-25s %s\n' "$repo" "no image"
        out+="$line"
        echo -n "$line"
      else
        out+="$(docker images "$repo" --format "{{.ID}} $repo:{{.Tag}}")\n"
        out+="push $repo:$cmd\n\n"
        docker push "$repo:$cmd"
      fi
    done
    send "$dname $cmd" "$out"

  ;;
  deliver|deploy)

    cmd="$1"
    echo "$cmd"|grep -Eq "^($DNAMES2)$" || usage 1
    shift

    if [ "$EUID" -eq 0 ]; then
      echo "Run me without sudo and God bless you"
    else
	exit
      [ $dname = 'deploy' ] && $SUDO -g docker "$BIN" "$NAME" test build
      $SUDO -g docker "$BIN" "$NAME" push "$cmd"
      $SUDO "$BIN" "$NAME" remote "$cmd" pull 
      $SUDO "$BIN" "$NAME" remote "$cmd" up
    fi

  ;;
esac
